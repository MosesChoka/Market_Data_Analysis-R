#import the data sets
library(readr)
#import the data sets
library(readr)
Subscription <- read_csv("Subscription.csv")
amusement <- read_csv("amusement.csv")
# i. number of rows and columns
dim(Subscription)
str(Subscription)
# iii. first and last 3 rows
head(Subscription, n = 3)
tail(Subscription, n = 3)
# iv. Check for any missing values
is.na(Subscription)
# iv. Check for any missing values
any(is.na(Subscription))
Subscription$gender <- as.factor(Subscription$gender)
Subscription$ownHome <- as.factor(Subscription$ownHome)
Subscription$subscribe <- as.factor(Subscription$subscribe)
Subscription$Segment <- as.factor(Subscription$Segment)
class(Subscription$gender)
class(Subscription["gender", "ownHome"])
class(Subscription$gender)
# vi. Summary statistics on the data
summary(Subscription)
subcribed <- Subscription %>%
filter(subscribe == "subYes")
# QUESTION TWO
library(dplyr)
subcribed <- Subscription %>%
filter(subscribe == "subYes")
head(subscribed)
subscribed <- Subscription %>%
filter(subscribe == "subYes")
head(subscribed)
summary(subscribed)
not_subscribed <- Subscription %>%
filter(subscribe == "subNo")
head(not_subscribed)
summary(not_subscribed)
not_subscribed$Segment
levels(not_subscribed$Segment)
levels(subscribed$Segment)
# i. subscription status and home ownership
home_owner_table <- table(Subscription$subscribe, Subscription$ownHome)
home_owner_table
home_owner_prop_table <- prop.table(home_owner_table, margin = 1)
home_owner_prop_table
# ii. subscription status and gender
gender_cross_table <- table(Subscription$subscribe, Subscription$gender)
gender_cross_table
gender_prop_table <- prop.table(gender_cross_table, margin = 1)
gender_prop_table
home_owner_prop_table <- prop.table(home_owner_table, margin = 2)
home_owner_prop_table_2 <- prop.table(home_owner_table, margin = 2)
home_owner_prop_table_2
gender_prop_table_2 <- prop.table(gender_cross_table, margin = 2)
gender_prop_table_2
# QUESTION 4
levels(Subscription$Segment)
Moving_up_stats <- Subscription %>%
filter(Segment == "Moving up") %>%
summarize(average_income = mean(income), average_no_kids = mean(kids),
average_age = mean(age))
Moving_up_stats
# Suburb mix segement
Sburb_mix_stats <- Subscription %>%
filter(Segment == "Suburb mix") %>%
summarize(average_income = mean(income), average_no_kids = mean(kids),
average_age = mean(age))
Sburb_mix_stats
# Travelers Segment
Travelers_stats <- Subscription %>%
filter(Segment == "Travelers") %>%
summarize(average_income = mean(income), average_no_kids = mean(kids),
average_age = mean(age))
Travelers_stats
Urban_hip_stats <- Subscription %>%
filter(Segment == "Urban hip") %>%
summarize(average_income = mean(income), average_no_kids = mean(kids),
average_age = mean(age))
Urban_hip_stats
# i) a histogram for income and discuss its distribution
library(ggplot2)
ggplot(Subscription,aes(income)) + geom_histogram()
ggplot(Subscription,aes(income)) + geom_histogram() + labs(
title = "A histogram for income "
)
# ii) a histogram for age
ggplot(Subscription,aes(age)) + geom_histogram() + labs(
title = "A histogram for age "
)
# iii) a boxplot for income vs. customer segments
ggplot(Subscription, aes(x = income, y = Segment )) + geom_boxplot()
# iii) a boxplot for income vs. customer segments
ggplot(Subscription, aes(x = income, y = Segment )) + geom_boxplot() +
labs(title = "A Boxplot for Income vs Customer Segments")
# iv)  a boxplot for age vs. customer segments
ggplot(Subscription, aes(x = age, y = Segment )) + geom_boxplot() +
labs(title = "A Boxplot for Age vs Customer Segments")
# QUESTION 7
# i) the number of rows (respondents) and number of columns (variables)
dim(amusement)
dim(amusement)
# ii) the data types of each variable
str(amusement)
# iii) whether there is any missing value in the data set
any(is.na(amusement))
# iv) run summary statistics of the dataset.
summary(amusement)
# QUESTION 8
library(car)
scatterplotMatrix(amusement)
scatterplotMatrix(formula=~num.child+distance+rides+games+wait+clean+overall,data=amusement)
amusement$num.child <- log(amusement$num.child)
amusement$distance <- log(amusement$distance)
qqnorm(amusement$num.child)
hist(amusement$num.child)
# iii) whether there is any missing value in the data set
any(is.na(amusement))
hist(amusement$num.child, probability = TRUE)
# Add a normal density curve to the histogram
curve(dnorm(x, mean=mean(amusement$num.child), sd=sd(my_data$var1)), col="red", lwd=2, add=TRUE)
# Add a normal density curve to the histogram
curve(dnorm(x, mean=mean(amusement$num.child), sd=sd(amusement$num.child)), col="red", lwd=2, add=TRUE)
hist(amusement$num.child, probability = TRUE)
# Add a normal density curve to the histogram
curve(dnorm(x, mean=mean(amusement$num.child), sd=sd(amusement$num.child)), col="red", lwd=2, add=TRUE)
# Add a normal density curve to the histogram
curve(dnorm(amusement$num.child, mean=mean(amusement$num.child), sd=sd(amusement$num.child)), col="red", lwd=2, add=TRUE)
hist(amusement$distance, probability = TRUE)
ggplot(amusement, aes(x = overall , y = rides)) + geom_point()
ggplot(amusement, aes(x = rides , y = overall)) + geom_point()
ggplot(amusement, aes(x = rides , y = overall)) + geom_point() + geom_abline()
plot(amusement$rides, amusement$overall)
plot(amusement$rides, amusement$overall, col = "blue", main = 'Scatterplot of rides and overall satisfaction'
, xlab = 'rides', ylab = 'overall satisfaction')
abline(lm(amusement$overall~amusement$overall ))
abline(lm(amusement$overall~amusement$ride ))
abline(lm(amusement$overall~amusement$rides ))
ggplot(amusement, aes(x = rides , y = overall)) + geom_point()
abline(lm(amusement$overall~amusement$rides ))
plot(amusement$rides, amusement$overall, col = "blue", main = 'Scatterplot of rides and overall satisfaction'
, xlab = 'rides', ylab = 'overall satisfaction')
abline(lm(amusement$overall~amusement$rides ))
# QUESTION 10 -  Run a correlation matrix with corrplot.mixed()
cor(amusement.drop("weekend", axis = 1))
# QUESTION 10 -  Run a correlation matrix with corrplot.mixed()
cor(amusement.drop("weekend", axis = 1))
# QUESTION 10 -  Run a correlation matrix with corrplot.mixed()
cor(amusement.drop["weekend", axis = 1])
# QUESTION 10 -  Run a correlation matrix with corrplot.mixed()
cor(amusement.drop("weekend", axis = 1))
cor(amusement[,2:8])
# QUESTION 10 -  Run a correlation matrix with corrplot.mixed()
library(corrplot)
install.packages("corrplot")
# QUESTION 10 -  Run a correlation matrix with corrplot.mixed()
library(corrplot)
cor_matrix <- cor(amusement[, 2:8])
cor_matrix
corrplot.mixed(cor_matrix, type="lower", order="hclust", tl.col="black", tl.srt=45)
corrplot.mixed(cor_matrix, type="upper", order="hclust", tl.col="black", tl.srt=45)
corrplot.mixed(cor_matrix, type="ellipse", order="hclust", tl.col="black", tl.srt=45)
cor_matrix <- cor(amusement[, 2:8])
cor_matrix
corrplot.mixed(cor_matrix)
corrplot.mixed(cor_matrix, type = "lower")
corrplot.mixed(cor_matrix, type = "ellipse")
cor_matrix <- cor(amusement[, 2:8],use = "complete.obs")
cor_matrix
corrplot.mixed(cor_matrix, method = "ellipse")
corrplot.mixed(cor_matrix)
corrplot.mixed(cor_matrix, type = "lower", order = NULL)
corrplot.mixed(cor_matrix)
corrplot(cor_matrix, method = "ellipse")
#import the data sets
library(readr)
Subscription <- read_csv("Subscription.csv")
amusement <- read_csv("amusement.csv")
# PART1 - Working with Subscription data set
# QUESTION 1
# i. number of rows and columns
dim(Subscription)
# ii. data type of each variable
str(Subscription)
# iii. first and last 3 rows
head(Subscription, n = 3)
tail(Subscription, n = 3)
# iv. Check for any missing values
any(is.na(Subscription))
# v. converting character type variables to factor type
Subscription$gender <- as.factor(Subscription$gender)
Subscription$ownHome <- as.factor(Subscription$ownHome)
Subscription$subscribe <- as.factor(Subscription$subscribe)
Subscription$Segment <- as.factor(Subscription$Segment)
class(Subscription$gender)
# vi. Summary statistics on the data
summary(Subscription)
# QUESTION TWO
library(dplyr)
subscribed <- Subscription %>%
filter(subscribe == "subYes")
head(subscribed)
summary(subscribed)
not_subscribed <- Subscription %>%
filter(subscribe == "subNo")
head(not_subscribed)
summary(not_subscribed)
# QUESTION 3
# create cross-tables and proportion-based cross tables between
# i. subscription status and home ownership
home_owner_table <- table(Subscription$subscribe, Subscription$ownHome)
home_owner_table
home_owner_prop_table <- prop.table(home_owner_table, margin = 1)
home_owner_prop_table
home_owner_prop_table_2 <- prop.table(home_owner_table, margin = 2)
home_owner_prop_table_2
# ii. subscription status and gender
gender_cross_table <- table(Subscription$subscribe, Subscription$gender)
gender_cross_table
gender_prop_table <- prop.table(gender_cross_table, margin = 1)
gender_prop_table
gender_prop_table_2 <- prop.table(gender_cross_table, margin = 2)
gender_prop_table_2
# QUESTION 4
levels(Subscription$Segment)
# a) what the average income, average number of kids, and average age is for each segment
# segment - Moving up
Moving_up_stats <- Subscription %>%
filter(Segment == "Moving up") %>%
summarize(average_income = mean(income), average_no_kids = mean(kids),
average_age = mean(age))
Moving_up_stats
# Suburb mix segement
Sburb_mix_stats <- Subscription %>%
filter(Segment == "Suburb mix") %>%
summarize(average_income = mean(income), average_no_kids = mean(kids),
average_age = mean(age))
Sburb_mix_stats
# Travelers Segment
Travelers_stats <- Subscription %>%
filter(Segment == "Travelers") %>%
summarize(average_income = mean(income), average_no_kids = mean(kids),
average_age = mean(age))
Travelers_stats
# Urban hip segment
Urban_hip_stats <- Subscription %>%
filter(Segment == "Urban hip") %>%
summarize(average_income = mean(income), average_no_kids = mean(kids),
average_age = mean(age))
Urban_hip_stats
# QUESTION FIVE
# i) a histogram for income and discuss its distribution
library(ggplot2)
ggplot(Subscription,aes(income)) + geom_histogram() + labs(
title = "A histogram for income "
)
# ii) a histogram for age
ggplot(Subscription,aes(age)) + geom_histogram() + labs(
title = "A histogram for age "
)
# iii) a boxplot for income vs. customer segments
ggplot(Subscription, aes(x = income, y = Segment )) + geom_boxplot() +
labs(title = "A Boxplot for Income vs Customer Segments")
# iv)  a boxplot for age vs. customer segments
ggplot(Subscription, aes(x = age, y = Segment )) + geom_boxplot() +
labs(title = "A Boxplot for Age vs Customer Segments")
# PART 2 - Relationship between continuous variables
# Using the amusements.csv data set
# QUESTION 7
# i) the number of rows (respondents) and number of columns (variables)
dim(amusement)
# ii) the data types of each variable
str(amusement)
# iii) whether there is any missing value in the data set
any(is.na(amusement))
# iv) run summary statistics of the data set.
summary(amusement)
# QUESTION 8
library(car)
scatterplotMatrix(formula=~num.child+distance+rides+games+wait+clean+overall,data=amusement)
# transform variables which are not normaly distributed
amusement$num.child <- log(amusement$num.child)
amusement$distance <- log(amusement$distance)
hist(amusement$num.child, probability = TRUE)
hist(amusement$distance, probability = TRUE)
# QUESTION 9
# Plot  a scatter plot for overall satisfaction and rides satisfaction
plot(amusement$rides, amusement$overall, col = "blue", main = 'Scatterplot of rides and overall satisfaction'
, xlab = 'rides', ylab = 'overall satisfaction')
abline(lm(amusement$overall~amusement$rides ))
# QUESTION 10 -  Run a correlation matrix with corrplot.mixed()
library(corrplot)
cor_matrix <- cor(amusement[, 2:8],use = "complete.obs")
cor_matrix
corrplot(cor_matrix, method = "ellipse")
